{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/app/frontend/src/components/Layouts/NewAnswer.jsx\";\nimport React, { Component } from 'react';\nimport CKEditor from 'ckeditor4-react';\nimport axios from \"axios\";\nimport Config from \"../BaseUrl/Config\";\n\nclass NewAnswer extends Component {\n  constructor(props) {\n    super(props);\n    this.error_msg = {\n      fontSize: 13,\n      color: 'chocolate'\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChangeBody = this.onChangeBody.bind(this);\n    this.onEditorChange = this.onEditorChange.bind(this);\n    this.state = {\n      body: '',\n      questionId: '',\n      upAnswer: false,\n      errors: ''\n    };\n  }\n\n  onEditorChange(evt) {\n    this.setState({\n      body: evt.editor.getData()\n    });\n  }\n\n  onChangeBody(changeEvent) {\n    this.setState({\n      body: changeEvent.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const obj = {\n      body: this.state.body,\n      questionId: this.props.questionId\n    };\n    const token = window.localStorage.getItem('jwt-token');\n    const config = {\n      headers: {\n        'Authorization': `${token}`\n      }\n    };\n\n    if (token) {\n      axios.post(`${Config.apiUrl}/api/answer`, obj, config).then(response => {\n        this.setState({\n          body: ''\n        });\n        this.props.manageState();\n      }).catch(error => {\n        if (error.response) {\n          // console.log(error.response.data.errors.body.msg);\n          this.setState({\n            errors: error.response.data.errors.body.msg\n          });\n        }\n      });\n    } else {\n      console.log(\"error\");\n    }\n  }\n\n  render() {\n    let {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"60px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"exampleInputPassword1\",\n          children: \"Your Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(CKEditor, {\n            data: this.state.body,\n            onChange: this.onEditorChange,\n            config: {\n              autoParagraph: false,\n              enterMode: 2,\n              type: 'inline'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error\",\n              style: this.error_msg,\n              children: errors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-success post-btn\",\n            children: \"Post Your Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default NewAnswer;","map":{"version":3,"sources":["/app/frontend/src/components/Layouts/NewAnswer.jsx"],"names":["React","Component","CKEditor","axios","Config","NewAnswer","constructor","props","error_msg","fontSize","color","onSubmit","bind","onChangeBody","onEditorChange","state","body","questionId","upAnswer","errors","evt","setState","editor","getData","changeEvent","target","value","e","preventDefault","obj","token","window","localStorage","getItem","config","headers","post","apiUrl","then","response","manageState","catch","error","data","msg","console","log","render","marginLeft","autoParagraph","enterMode","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CKEditor from 'ckeditor4-react';\nimport axios from \"axios\";\nimport Config from \"../BaseUrl/Config\";\n\nclass NewAnswer extends Component {\n    error_msg = {\n        fontSize: 13,\n        color: 'chocolate'\n    }\n    constructor(props) {\n        super(props);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onChangeBody = this.onChangeBody.bind(this);\n        this.onEditorChange = this.onEditorChange.bind(this);\n\n        this.state = { \n            body: '',\n            questionId:'',\n            upAnswer:false,\n            errors: '',\n            \n        };\n    }\n\n\n    onEditorChange(evt) {\n        this.setState({\n            body: evt.editor.getData()\n        });\n    }\n\n\n    onChangeBody(changeEvent) {\n        this.setState({\n            body: changeEvent.target.value\n        })\n    }\n\n\n    onSubmit(e) {\n        e.preventDefault();\n        const obj = {\n            body: this.state.body,\n            questionId: this.props.questionId,\n        };\n\n        const token = window.localStorage.getItem('jwt-token')\n        const config = {\n            headers: {\n                'Authorization': `${token}`\n            }\n        }\n\n        if (token) {\n            axios.post(`${Config.apiUrl}/api/answer`, obj, config)\n                .then(response => {\n                    this.setState({\n                        body: '',\n                       \n                    })\n                    this.props.manageState()\n                })\n\n                .catch(error =>{\n                    if (error.response) {\n                        // console.log(error.response.data.errors.body.msg);\n                        this.setState({\n                            errors:error.response.data.errors.body.msg\n                        })\n                      }      \n                }\n                );\n        }\n        else {\n            console.log(\"error\")\n        }\n    }\n\n    render() {\n        let {  errors } = this.state;\n        return (\n            <React.Fragment>\n                <div style={{ marginLeft: \"60px\" }}>\n                <label for=\"exampleInputPassword1\">Your Answer</label>\n                \n                <form onSubmit={this.onSubmit}>\n                    <CKEditor\n                        data={this.state.body}\n                        onChange={this.onEditorChange}\n                        config={{\n                            autoParagraph: false,\n                            enterMode: 2,\n                            type: 'inline'\n                        }}\n                    >\n                    </CKEditor>\n                    <br/>\n                    <div>\n                    <span className='error' style={this.error_msg}>{errors}</span>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success post-btn\">Post Your Answer</button>\n                </form>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n}\nexport default NewAnswer"]},"metadata":{},"sourceType":"module"}